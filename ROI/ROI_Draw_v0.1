%% ROI (Region of Interest) Plotter

close all
clear
set(groot, 'DefaultFigureVisible', 'on')

%% Get background image.
% This will be a NanoSIMS image

I = imread('cat.png');

% Get the number of pixels (will be 256x256 for the NanoSIMS images)
maxy = size(I, 1);
maxx = size(I, 2);

%% Create a store for the selected vertices of the polygon around the ROI

x = []; % x coordinates of vertices
y = []; % y coordinates of vertices

%% Print Instructions

fprintf(['Click to add a point on the outside of the area you want. \n', ...
    'Press enter when done adding as many as you want. \n', ...
    'You', '''', 'll then be asked if you want to add more points \n', ...
    'This time, you', '''', 'll be able to see your previous points \n', ...
    'You can keep doing this as much as you want \n', ...
    'Just press enter then 0 to exit when done \n \n'])

while true

    % Ask if you want to continue. Press 1 until you are done.

    loop = input('Continue Plotting Vertices? (1/0) : '); % 1 to continue 0 to break loop


    if loop == 1

        hold on
        imshow(I) % Show the underlying NanoSIMS image
        plot(x, y, '.r', 'MarkerSize', 15) % Plot the points that have already been clicked

        %% Set the size of the figure
        fig = gcf;
        fig.Units = 'pixels';
        fig.Position(3:4) = [500, 500];
        g = gca;
        g.Units = 'pixels';
        g.Position = [0, 0, 500, 500];

        ylim([0, maxx]);
        xlim([0, maxy]);

        %% Get user to click on points that they want as the vertices of the
        % polygon surrounding the ROI

        hold on
        [xtemp, ytemp] = ginput;
        hold off

    else
        break % Get another round of point entry if key is pressed
    end

    % Add the new vertices to the variable holding all the vertex positions

    x = [x; xtemp];
    y = [y; ytemp];

end

%% Now test only including data within the plot
% -------------------------------------------------------------------------

% Create a mesh of all points (simulating the pixels)
[Xmesh, Ymesh] = meshgrid(0:maxx, 0:maxy);
% Find if pixels are inside the drawn polygon
[in, on] = inpolygon(Xmesh, Ymesh, x, y);

hold on
plot(Xmesh(in), Ymesh(in), 'r+') % Plot pixels in the polygon in red
plot(Xmesh(~in), Ymesh(~in), 'b+') % Plot pixels outside the polygon in blue
hold off

%% Now do maths on points inside the polygon
% -------------------------------------------------------------------------

numberofinteriorpoints = numel(Xmesh(in));
